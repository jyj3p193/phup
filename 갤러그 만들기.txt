import pygame
import sys
import random
from time import sleep



padWidth = 480
padHeight = 640
rockimage = ['rock01.png','rock02.png','rock03.png','rock04.png','rock05.png', \
'rock06.png','rock07png','rock08.png','rock09.png','rock10.png', \
'rock11.png','rock12.png','rock13.png','rock14.png','rock15.png', \
'rock16.png','rock17.png','rock18.png','rock19.png','rock20.png', \
'rock21.png','rock22.png','rock23.png','rock24.png','rock25.png', \
'rock26.png','rock27.png','rock28.png','rock29.png','rock30.png' ] #운석 이미지


def writeScore(count):
    global gamePad
    font = pygame.font.Font('NanumGothic.ttf', 20) #파괴한 운석 표기를 위한 폰트설정 및 색 설정
    text = font.render('파괴한 운석 수:' + str(count), True, (255,255,255))
    gamePad.blit(text, (10, 0))

def writePassed(count):
        global gamePad
        font = pygame.font.Font('NanumGothic.ttf', 20)  # 놓친 운석 표기를 위한 폰트설정 및 색 설정
        text = font.render('놓친 운석 수:' + str(count), True, (255, 0, 0))
        gamePad.blit(text, (330, 0))

def writeMessage(text):
    global  gamePad
    textfront = pygame.font.Font('NanumGothic.ttf', 60)
    text = textfront.render(text, True, (255, 0 ,0))
    textpos = text.get_rect()
    textpos.center = (padWidth/2, padHeight/2)  #텍스트 포지션 설정 정중앙 출력
    gamePad.blit(text, textpos)
    pygame.display.update()
    sleep(2) #2초뒤 재시작
    runGame()

def crash():
    global gamePad
    writeMessage('전투기 박살!')

def gameOver():
    global gamePad
    writeMessage('게임 오버!')

def drawObject(obj,x,y):
    global  gamePad
    gamePad.blit(obj,(x,y))


def  initGame():
    global gamePad, clock, background, fighter, missile, explosion
    pygame.init()
    gamePad = pygame.display.set_mode((padWidth, padHeight))
    pygame.display.set_caption('재열이의 갤러그')
    background = pygame.image.load('background.png') # 배경그림
    fighter = pygame.image.load('fighter.png') #전투기그림
    missile = pygame.image.load('missile.png') #미사일그림
    explosion = pygame.image.load('explosion.png') #터지는 그림
    clock = pygame.time.Clock()

def runGame():
    global gapdPad, clock, background, fighter, missile, explosion

    fighterSize = fighter.get_rect() #전투기 크기가져오기
    fighterWidth =  fighterSize[0]
    fighterHeight =  fighterSize[1]

    x = padWidth * 0.45
    y = padHeight * 0.9  #전투기 시작위치
    fighterX = 0

    missileXY = []

    rock = pygame.image.load(random.choice(rockimage))# 운석의이미지 랜덤하기고르기 위함
    rockSize = rock.get_rect().size
    rockWidth = rockSize[0]
    rockHeight = rockSize[1] #사이즈도 랜덤

    rockX = random.randrange(0, padWidth - rockWidth) #생성되는 곳도 랜덤
    rockY = 0 # Y축은 일정해야함 안그럼 비행기 바로 앞에서 운석 생성되면 게임이 진행불가
    rockSpeed = 2

    isShot = False #운석이 맞았을때
    shotCount = 0
    rockPassed = 0



    onGame = False
    while not onGame:
        for event in pygame.event.get():
            if event.type in [pygame.QUIT]: #프로그램 종료
                pygame.quit()
                sys.exit()

            if event.type in [pygame.KEYDOWN]: #키보드로 움직이기
                if event.key == pygame.K_LEFT:
                    fighterX -= 5 #왼쪽으로

                elif event.key == pygame.K_RIGHT:
                    fighterX += 5

                elif event.key == pygame.K_SPACE: #스페이스 누를때 미사일 발사
                    missileX = x + fighterWidth/2 #미사일을 비행기 중간에서 발사하기 위함
                    missileY = y - fighterHeight
                    missileXY.append([missileX, missileY])



            if event.type in [pygame.KEYUP]: #손을 뗐을때 멈추게하기
                  if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                        fighterX = 0




        drawObject(background,0 , 0) #게임화면 배경설정

        x += fighterX #키보드로 바뀐 X좌표위치를 변경
        if x < 0:
            x = 0
        elif x > padWidth - fighterWidth: #전투기가 화면 바깥을 못벗어나게 설정
            x = padWidth - fighterWidth

        if y < rockY + rockHeight: #전투기와 바위가 충돌했을때 설정
            if(rockX > x and rockX < x + fighterWidth) or \
                    (rockX + rockWidth > x and rockX + rockWidth < x + fighterWidth):
                crash()

        drawObject(fighter, x, y)

        if len(missileXY) != 0:
            for i, bxy in  enumerate(missileXY):
                bxy[1] -= 10 #미사일을 y좌표로 -10씩 이동
                missileXY[i][1] = bxy[1]

                if bxy[1]  < rockY: #미사일이 운석에 맞았을때
                    if bxy[0] > rockX and bxy[0] < rockX + rockWidth:
                        missileXY.remove(bxy) #미사일이 운석에 맞았으니 미사일제거
                        isShot = True
                        shotCount += 1 #맞출때마다 카운트

                if bxy[1] <= 0: #미사일이 화면 밖으로 나갔을때 제거
                    try:
                        missileXY.remove(bxy)
                    except:
                        pass

        if len(missileXY) != 0:
            for bx, by in missileXY:
                drawObject(missile, bx, by) #미사일 그리기


        writeScore(shotCount) #샷카운트 활용하여 몇개 맞췄는지 체크

        rockY += rockSpeed

        if rockY > padHeight: #운석이 화면밖으로 나가면 새로 생성
            rock = pygame.image.load(random.choice(rockimage))
            rockSize = rock.get_rect().size
            rockWidth = rockSize[0]
            rockHeight = rockSize[1]
            rockX = random.randrange(0, padWidth - rockWidth)
            rockY = 0
            rockPassed += 1 #화면 밖으로 벗어난 운석당 1증가

        if rockPassed == 4: #4개이상 놓치면 게임오버
            gameOver()

        writePassed(rockPassed)


        if isShot: #미사일이 운석에 맞았을때 폭파모션 그리고 새로운운석그리기
            drawObject(explosion, rockX, rockY)
            rock = pygame.image.load(random.choice(rockimage))
            rockSize = rock.get_rect().size
            rockWidth = rockSize[0]
            rockHeight = rockSize[1]
            rockX = random.randrange(0, padWidth - rockWidth)
            rockY = 0
            isShot = False

            rockSpeed += 0.2  # 점점 난이도 상승을위한 돌 속도 상승
            if rockSpeed >= 10:
                rockSpeed = 10 # 10이상은 난이도 제한



        drawObject(rock, rockX, rockY)


        pygame.display.update() #화면 다시그림
        clock.tick(60)   #초당프레임 60
    pygame.quit()

initGame()
runGame()


